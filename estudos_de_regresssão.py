# -*- coding: utf-8 -*-
"""Imersão.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u2QxQUaog9yV20J1o-uCANmC_sJ9IGq7

#Regressão Linear(1 Variável)
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

np.random.seed(0)
tamanho_casa = np.random.randint(100, 300, 100)
preco_casa = 500 * tamanho_casa + np.random.randint(10000, 30000, 100)
plt.scatter(tamanho_casa, preco_casa, label='Dados Reais')
model = LinearRegression()
model.fit(tamanho_casa.reshape(-1,1), preco_casa)
preco_casa_pred = model.predict(tamanho_casa.reshape(-1,1))
mae = mean_absolute_error(preco_casa, preco_casa_pred)
mse = mean_squared_error(preco_casa, preco_casa_pred)
plt.plot(tamanho_casa, preco_casa_pred, label='Regressão Linear', color='r')
plt.title('Predição do Preço de uma casa')
plt.xlabel('Tamanho da casa')
plt.ylabel('Preço da casa')
plt.show()

print(f'MAE: ${mae:.2f}')
print(f'MSE: ${mse:.2f}')

model.predict([[300]])

"""#Regressão Linear(Multivariável)"""

from sklearn.preprocessing import StandardScaler

np.random.seed(0)
tamanho_casa = np.random.randint(100, 300, 100)
qtd_quartos = np.random.randint(1, 5, 100)
qtd_andares = np.random.randint(1, 3, 100)
idade_casa = np.random.randint(1, 50, 100)

preco_casa = 500 * tamanho_casa + 10000 * qtd_quartos + 10000 * qtd_andares - 1000*idade_casa +  np.random.randint(10000, 30000, 100)

dados_casa = np.array([tamanho_casa, qtd_quartos, qtd_andares, idade_casa]).T

scala = StandardScaler()

dados_casa_norm = scala.fit_transform(dados_casa)

model = LinearRegression()

model.fit(dados_casa_norm, preco_casa)

preco_casa_pred = model.predict(dados_casa_norm)

mae = mean_absolute_error(preco_casa, preco_casa_pred)
mse = mean_squared_error(preco_casa, preco_casa_pred)

print(f'MAE: ${mae:.2f}')
print(f'MSE: ${mse:.2f}')

"""#Regressão Logística"""

from sklearn.linear_model import LogisticRegression
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


dataset = load_iris()

X = dataset.data
y = dataset.target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)

model = LogisticRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

acc = accuracy_score(y_test, y_pred)

print(f'Acurácia: {acc: .2f}')